// Copyright (c) 2024, ros2_control Development Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Authors: Bence Magyar
//

#ifndef WORKSHOP_CONTROLLERS__CHAINED_FILTER_HPP_
#define WORKSHOP_CONTROLLERS__CHAINED_FILTER_HPP_

#include <memory>
#include <string>
#include <vector>

#include "chained_filter_parameters.hpp"  // autogenerated by generate_parameter_library
#include "controller_interface/chainable_controller_interface.hpp"
#include "example_interfaces/msg/float64.hpp"
#include "filters/filter_chain.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_buffer.h"

namespace workshop_controllers
{

using DataType = example_interfaces::msg::Float64;

class ChainedFilter : public controller_interface::ChainableControllerInterface
{
public:
  controller_interface::CallbackReturn on_init() override;

  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  controller_interface::CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;

  bool on_set_chained_mode(bool chained_mode) override;

  controller_interface::return_type update_and_write_commands(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

protected:
  std::vector<hardware_interface::StateInterface> on_export_state_interfaces() override;

  controller_interface::return_type update_reference_from_subscribers(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  std::shared_ptr<chained_filter::ParamListener> param_listener_;
  chained_filter::Params params_;

  realtime_tools::RealtimeBuffer<std::shared_ptr<DataType>> rt_buffer_ptr_;
  rclcpp::Subscription<DataType>::SharedPtr joints_cmd_sub_;

  std::vector<std::string> reference_interface_names_;

  std::vector<std::string> command_interface_names_;
};

}  // namespace workshop_controllers

#endif  // WORKSHOP_CONTROLLERS__CHAINED_FILTER_HPP_
